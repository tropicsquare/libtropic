:project:
  :use_exceptions: FALSE
  :use_test_preprocessor: TRUE
  :use_auxiliary_dependencies: TRUE
  :build_root: build
  :test_file_prefix: test_
  :which_ceedling: gem
  :ceedling_version: 0.31.0
  :default_tasks:
    - test:all

:environment:

:extension:
  :executable: .out

:paths:
  :test:
    - +:tests/unit/**
    - -:tests/unit/support
  :source:
    - ./include/*
    - ./src/**
    - ./vendor/trezor_crypto/**
    - ./hal/**
    - ./hal/crypto/trezor_crypto/*
  :support:
    - tests/unit/support
  :libraries: []

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :common: &common_defines [LIBT_DEBUG]
  :test:
    - *common_defines
    - TEST
    - USE_TREZOR_CRYPTO
  :test_preprocess:
    - *common_defines
    - TEST

:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
    - :callback
    - :expect_any_args
    - :array
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8

#:tools:
# Ceedling defaults to using gcc for compiling, linking, etc.
# As [:tools] is blank, gcc will be used (so long as it's in your system path)
# See documentation to configure a given toolchain for use

# LIBRARIES
# These libraries are automatically injected into the build process. Those specified as
# common will be used in all types of builds. Otherwise, libraries can be injected in just
# tests or releases. These options are MERGED with the options in supplemental yaml files.
:libraries:
  :placement: :end
  :flag: "-l${1}"
  :path_flag: "-L ${1}"
  #:system: [mbedcrypto]    # Uncomment this when compiling with mbedtls library. Mbedtls must be installed on the system.
  :test: []
  :release: []

:flags:
  :test:
    :compile:
      :*:
        - -Wall -Wextra -pedantic
  :gcov:
    :compile:
      :*:
        - -Wall -Wextra -pedantic

:plugins:
  :load_paths:
    - "#{Ceedling.load_path}"
  :enabled:
    - module_generator
    - stdout_gtestlike_tests_report
    - xml_tests_report
    - gcov
    - junit_tests_report

:junit_tests_report:
  :artifact_filename: junit_report.xml

# Add -gcov to the plugins list to make sure of the gcov plugin
# You will need to have gcov and gcovr both installed to make it work.
# For more information on these options, see docs in plugins/gcov
:gcov:
  :reports:
    - Text
    - Cobertura
  :gcovr:
    :report_exclude: "^vendor.*|^build.*|^test.*"
